//Importing all the packages and classes

//Import the package which contains the Server Skeleton
import PrathamCalculator.*;

//Import the below two packages to use the Naming Service
import org.omg.CosNaming.*;
import org.omg.CosNaming.NamingContextPackage.*;

//Import this package to run the CORBA Application
import org.omg.CORBA.*;//

//Import the below to Classes for inheriting Portable Server
import org.omg.PortableServer.*;
import org.omg.PortableServer.POA;

//Initiate the ORB using the class Properties
import java.util.Properties;

//Perform the Input-Output functionalities
import java.io.*;
import java.lang.reflect.Array;
import java.util.*; 


//Write the Servant class
//It inherits the general CORBA utilities generated by the Compiler

class Calcserverimpl extends CalcPOA 

{

//orb variable is used to invoke the shutdown()
private ORB orb;

public void setORB(ORB orb_val)
 
{
    
orb = orb_val;
 
}
    

//Declaring and Implementing the required method
public int calculate(int a,int b,int c)

{

//ADDITION
if(a==43)
{
return (b+c);
}

//SUBTRACTION
else if(a==45)
{
return (b-c);
}

//MULTIPLICATION
else if(a==42)
{
return (b*c);
}

//DIVISION
else if(a==47)
{
return (b/c);
}

//Decimal a binario
else if(a==98) //Operador es la letra b -> Ej: b03 Resultado: 11
{
  ArrayList<Integer> array = new ArrayList<Integer>();
  int res = 0;
  int valor = b*10 + c;

  if (valor == 1 || valor == 0){ // Funcion para conseguir ceros y unos con el operando modulo
    array.add(valor);
  }else{
    while (valor >= 1){       // Mientras el valor sea mayor/igual que 1 el codigo entre corchetes sera ejecutado
        int val = valor % 2; // Devuelve el modulo de dividir el valor entre 2 que siempre es 0 o 1
        array.add(val);     // Agrega el valor obtenido anteriormente a una ArrayList 
        valor = valor/2;   //Divide el valor entre dos para realizar la siguiente operacion
    }
}
  for(int i = array.size() - 1; i >= 0; i--) { // Pone los valores del array en res para retornarlo
    if (array.get(i) == 0 ){
      res *= 10;     // Si en la posicion en la que esta tiene un 0, se multiplica por 10 para representar un salto 
    }else{          // Si en la posicion en la que esta tiene un 1, se multiplica por 10 para hacer un salto y se suma 1
      res *= 10;   // Ej: Si tenemos la secuencia 101 en el array, el programa detecta el 1 y empieza con una multiplicacion por 10
      res += 1;   // Pero como todavia tenemos un 0 de valor, no cambia. Se le suma uno y el resultado que tenemos ahora es de 1
    }            // Pasamos a la siguiente iteracion, que recibe un 0, entonces se multiplica por 10 y tenemos de resultado 10
  }             // En la ultima iteracion recibimos otro 1, entonces multiplicamos por 10 el resultado y nos queda 100, finalmente               
return res;    // Le sumamos un 1 y el resultado final nos da 101.
}



//DEFAULT
else
{
return 0;
}

}

//Closing the server 
  public void shutdown() 
{
    orb.shutdown(false);
}

}//end of the servant class


public class CalcServer
 
{

public static void main(String args[])
 
{

try

{

//Create and Initialize the ORB object
//init() allows to set the properties at run time


ORB orb=ORB.init(args,null);


//Obtain the initial Naming Context
//Obtain an initial object reference to the name server


//orb retrieves the reference to the Root POA
//Activate the POA Manager
//activate() causes the POAs to process the client requests


POA rootpoa=POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
rootpoa.the_POAManager().activate();


//The server instantiates the servant objects
//The servant performs the operations defined in the idlj interface


Calcserverimpl simpl=new Calcserverimpl();
simpl.setORB(orb); 


//Get the object reference associated with the servant
//narrow() is used to cast CORBA obj ref to its proper type


org.omg.CORBA.Object ref = rootpoa.servant_to_reference(simpl);
Calc href=CalcHelper.narrow(ref);
          
//Obtain the initial Naming Context
//Obtain an object reference to the Name Server


org.omg.CORBA.Object objRef=orb.resolve_initial_references("NameService");


//Narrow the objref to its proper type


NamingContextExt ncRef=NamingContextExtHelper.narrow(objRef);


//Register the Servant with the Name Server


String name = "Calc";


//NameComponent array contains the path to Calc


NameComponent path[]=ncRef.to_name(name);


//Pass the path and the servant object to the Naming Service
//Bind the servant object to Calc


ncRef.rebind(path,href);

System.out.println("The SERVER is READY");
System.out.println("The SERVER is WAITING to receive the CLIENT requests");


//run() is called by the main thread
//run() enables the ORB to perform work using the main thread
//the server waits until an invocation comes from the ORB


orb.run();

} 
        
catch (Exception e)

{

System.err.println("ERROR: " + e);
e.printStackTrace(System.out);

}


//This statement is executed when the Client wishes to discontinue          
System.out.println("The Server Exits");
    
}//end of main()

}//end of CalcServer()